https://devopscube.com/setup-prometheus-monitoring-on-kubernetes/

git clone https://github.com/bibinwilson/kubernetes-prometheus

kubectl create namespace monitoring
kubectl create -f k8sb13-prometheus/clusterRole.yaml

prometheus.yaml: 
This is the main Prometheus configuration which holds all the scrape configs, service discovery details, storage locations, data retention configs, etc)

prometheus.rules: 
This file contains all the Prometheus alerting rules.

By externalizing/decoupling Prometheus configs to a Kubernetes config map, you donâ€™t have to build the Prometheus image whenever you need to add or remove a configuration. You need to update the config map and restart the Prometheus pods to apply the new configuration.

kubectl create -f k8sb13-prometheus/config-map.yaml

kubectl create -f k8sb13-prometheus/prometheus-deployment.yaml

------Setting Up Kube State Metrics----------
https://devopscube.com/setup-kube-state-metrics/
Kube State metrics is a service that talks to the Kubernetes API server to get all the details about all the API objects like deployments, pods, daemonsets, Statefulsets, etc
Kube state metrics service will provide many metrics which is not available by default. Please make sure you deploy Kube state metrics to monitor all your kubernetes API objects like deployments, pods, jobs, cronjobs etc.

Following are some of the important metrics you can get from Kube state metrics.

    Node status, node capacity (CPU and memory)
    Replica-set compliance (desired/available/unavailable/updated status of replicas per deployment)
    Pod status (waiting, running, ready, etc)
    Ingress metrics
    PV, PVC metrics
    Daemonset & Statefulset metrics.
    Resource requests and limits.
    Job & Cronjob metrics
	
git clone https://github.com/devopscube/kube-state-metrics-configs.git
kubectl apply -f kube-state-metrics-configs/
kubectl get deployments kube-state-metrics -n kube-system


------------ALERTMANAGER------------
https://devopscube.com/alert-manager-kubernetes-guide/
git clone https://github.com/bibinwilson/kubernetes-alert-manager.git


------------GRAFANA-----------------
https://devopscube.com/setup-grafana-kubernetes/
kubectl create -f grafana-datasource-config.yaml
kubectl create -f deployment.yaml
kubectl create -f service.yaml

---------------Node Exporter--------------
git clone https://github.com/bibinwilson/kubernetes-node-exporter
kubectl create -f daemonset.yaml
kubectl create -f service.yaml
kubectl get endpoints -n monitoring 
root@utils:/# curl http://100.96.1.5:9100/metrics

100 - ((node_filesystem_avail_bytes{mountpoint="/",fstype!="rootfs"} * 100) /            node_filesystem_size_bytes{mountpoint="/",fstype!="rootfs"})

(1 - avg(irate(node_cpu_seconds_total{mode="idle"}[10m])) by (instance)) * 100

100 * (1 - ((avg_over_time(node_memory_MemFree_bytes[10m]) + avg_over_time(node_memory_Cached_bytes[10m]) + avg_over_time(node_memory_Buffers_bytes[10m])) / avg_over_time(node_memory_MemTotal_bytes[10m])))


Also, the CNCF project Thanos helps you aggregate metrics from multiple Kubernetes Prometheus sources and have a highly available setup with scalable 
storage.




